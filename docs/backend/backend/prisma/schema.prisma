// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  displayName   String?
  bio           String?
  profileImage  String?
  headerImage   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tweets        Tweet[]
  likes         Like[]
  retweets      Retweet[]
  followers     Follows[] @relation("UserFollowers")
  following     Follows[] @relation("UserFollowing")
}

model Tweet {
  id          Int        @id @default(autoincrement())
  content     String
  imageUrl    String?
  createdAt   DateTime   @default(now())
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  likes       Like[]
  retweets    Retweet[]
  replies     Tweet[]    @relation("Replies", references: [id])
  replyTo     Tweet?     @relation("Replies", fields: [replyToId], references: [id])
  replyToId   Int?
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
  createdAt DateTime @default(now())
}

model Retweet {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   Int
  createdAt DateTime @default(now())
}

model Follows {
  id           Int    @id @default(autoincrement())
  follower     User   @relation("UserFollowers", fields: [followerId], references: [id])
  followerId   Int
  following    User   @relation("UserFollowing", fields: [followingId], references: [id])
  followingId  Int
  createdAt    DateTime @default(now())
}
